name: Deploy to Elastic Beanstalk

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref }}-
            ${{ runner.os }}-buildx-

      - name: Build the Docker image
        run: docker build -t docker-react-test -f ./frontend/Dockerfile.dev ./frontend

      - name: Run tests
        run: docker run -e CI=true docker-react-test npm run test -- --coverage

  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::185157186506:role/GithubActionsElasticBeanStalkRole
          aws-region: ap-southeast-1

      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build, tag, and push image to ECR
      - name: Build, tag, and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-react
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./frontend/Dockerfile ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Generate unique version label once
      - name: Generate unique version label
        id: vars
        run: echo "VERSION_LABEL=${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      # Create Dockerrun.aws.json and zip it
      - name: Generate Dockerrun.aws.json
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-react
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cat > Dockerrun.aws.json <<EOF
          {
            "AWSEBDockerrunVersion": 1,
            "Image": {
              "Name": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "80"
              }
            ]
          }
          EOF
          zip $VERSION_LABEL.zip Dockerrun.aws.json

      - name: Upload to S3
        run: |
          aws s3 cp $VERSION_LABEL.zip s3://elasticbeanstalk-ap-southeast-1-185157186506/dockerrun/$VERSION_LABEL.zip

      # Create application if missing
      - name: Ensure application exists
        run: |
          if ! aws elasticbeanstalk describe-applications \
            --application-names docker-react \
            --query "Applications[0].ApplicationName" --output text 2>/dev/null | grep -q docker-react; then
            echo "Application not found. Creating docker-react..."
            aws elasticbeanstalk create-application --application-name docker-react
          else
            echo "Application already exists."
          fi

      # Verify EC2 IAM role exists (must be created manually)
      - name: Verify EC2 IAM Role
        run: |
          if aws iam get-role --role-name ElasticBeanstalk-EC2-Role 2>/dev/null; then
            echo "IAM role exists. Checking instance profile..."
            if aws iam get-instance-profile --instance-profile-name ElasticBeanstalk-EC2-Role 2>/dev/null; then
              echo "Instance profile exists. Ready to deploy."
            else
              echo "ERROR: Instance profile 'ElasticBeanstalk-EC2-Role' does not exist."
              echo "Please create it manually in AWS Console:"
              echo "1. Go to IAM Console > Instance Profiles"
              echo "2. Create instance profile named 'ElasticBeanstalk-EC2-Role'"
              echo "3. Add role 'ElasticBeanstalk-EC2-Role' to the instance profile"
              exit 1
            fi
          else
            echo "ERROR: IAM role 'ElasticBeanstalk-EC2-Role' does not exist."
            echo "Please create it manually in AWS Console:"
            echo "1. Go to IAM Console > Roles"
            echo "2. Create role for EC2 service"
            echo "3. Attach policies: AWSElasticBeanstalkWebTier, AmazonEC2ContainerRegistryReadOnly"
            echo "4. Name it 'ElasticBeanstalk-EC2-Role'"
            echo "5. Create instance profile with the same name"
            exit 1
          fi

      # Create new application version
      - name: Create application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name docker-react \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket=elasticbeanstalk-ap-southeast-1-185157186506,S3Key=dockerrun/$VERSION_LABEL.zip

      # Create or update environment
      - name: Create or Update environment
        run: |
          ENV_STATUS=$(aws elasticbeanstalk describe-environments \
            --application-name docker-react \
            --environment-names production \
             --query "Environments[0].Status" \
             --output text 2>/dev/null || echo "NONE")

           if [ "$ENV_STATUS" = "NONE" ] || [ "$ENV_STATUS" = "None" ] || [ "$ENV_STATUS" = "Terminated" ]; then
             echo "Environment not found or terminated. Creating production..."
             aws elasticbeanstalk create-environment \
               --application-name docker-react \
               --environment-name production \
               --solution-stack-name "64bit Amazon Linux 2023 v4.7.1 running Docker" \
               --version-label $VERSION_LABEL \
               --option-settings Namespace=aws:autoscaling:launchconfiguration,OptionName=IamInstanceProfile,Value=ElasticBeanstalk-EC2-Role
           else
             echo "Environment exists (status: $ENV_STATUS). Updating production..."
             aws elasticbeanstalk update-environment \
               --environment-name production \
               --version-label $VERSION_LABEL
           fi

      # Cleanup old application versions (keep last 10)
      - name: Cleanup old application versions
        run: |
          VERSIONS=$(aws elasticbeanstalk describe-application-versions \
            --application-name docker-react \
            --query "ApplicationVersions[?Status=='PROCESSED'].VersionLabel" \
            --output text | tr '\t' '\n' | sort)

          COUNT=$(echo "$VERSIONS" | wc -l)

          if [ $COUNT -gt 10 ]; then
            DELETE=$(echo "$VERSIONS" | head -n -10)
            for v in $DELETE; do
              echo "Deleting old version: $v"
              aws elasticbeanstalk delete-application-version \
                --application-name docker-react \
                --version-label $v \
                --delete-source-bundle
            done
          else
            echo "No cleanup needed. Total versions: $COUNT"
          fi
